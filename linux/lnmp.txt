lnmp的工作原理：
原理图：https://img-blog.csdn.net/20170625212332082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU5MjM3MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast

客户端发起请求，nginx判断是否是动态文件，若是动态文件，则把http请求转发给fast-cgi接口，cgi与PHP通信。

netstat -nlpt|grep php-fpm  //

nginx是一个高性能的http服务器和反向代理服务器
   客户端发起请求，nginx判断是否是动态文件，若是动态文件，则把http请求转发给fast-cgi接口，cgi与PHP通信。
   nginx的worker进程管理每一个请求到nginx的请求
   nginx不支持脚本语言，php-fpm是nginx与PHP之间的通讯接口，
   php是脚本语言，负责处理客户端的请求。

lnmp工作的完整流程：
  www.example.com        |
       |
     Nginx        |
       |路由到www.example.com/index.php        |
       |加载nginx的fast-cgi模块        |
       |fast-cgi监听127.0.0.1:9000地址        |
       |www.example.com/index.php请求到达127.0.0.1:9000
       |
       |php-fpm 监听127.0.0.1:9000
       |
       |php-fpm 接收到请求，启用worker进程处理请求        |
       |php-fpm 处理完请求，返回给nginx        |
       |nginx将结果通过http返回给浏览器


/*
* fast-cgi注释：
*  fast-cgi是一个在http-server(服务器端)和动态(php)脚本语言之间通信的接口。
*  fast-cgi支持众多的脚本语言，其中就包括php脚本语言。
*    FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析*  守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给Fast-CGI进程来执行，然后将得到的结果返回给浏览器。
*/


/*
*　 PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的，它其实是PHP源代码的一个补丁，旨在将Fast-CGI进程管理整合进PHP包
*  中。
*/



===============================================
负载均衡：
当一台服务器性能达到极限，使用服务器集群，其中一台服务器充当调度者的角色。接受客户端所有的请求，然后再根据每台服务器的负载均衡的状况，分配到不同的服务器。

负载均衡四种实现方式：

1.http请求重定向：
   a.浏览器 请求  服务器集群 
   b.服务器集群 选择一台服务器的ip,并将该ip响应给浏览器
   c.浏览器重定向请求该ip的服务器。

2.反向代理负载均衡


3.dns负载均衡：
通过域名和对应ip的解析，直接把ip映射到不同的服务器上。


nginx配置负载均衡的话：需要在nginx.conf中设置http节点：

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {

    #设定mime类型,类型由mime.type文件定义
    include             /etc/nginx/mime.types;
    default_type    application/octet-stream;

    #设定日志格式
    access_log        /var/log/nginx/access.log;

    #省略上文有的一些配置节点
    #。。。。。。。。。。

    #设定负载均衡的服务器列表
    upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.8.1x:3128 weight=5;
        #本机上的Squid开启3128端口,不是必须要squid
        server 192.168.8.2x:80    weight=1;
        server 192.168.8.3x:80    weight=6;
    }
        
    upstream mysvr2 {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.8.x:80    weight=1;
        server 192.168.8.x:80    weight=6;
    }

    #第一个虚拟服务器
    server {
        #侦听192.168.8.x的80端口
        listen             80;
        server_name    192.168.8.x;

        #对aspx后缀的进行负载均衡请求
        location ~ .*.aspx$ {
            #定义服务器的默认网站根目录位置
            root     /root; 
            #定义首页索引文件的名称
            index index.php index.html index.htm;
            
            #请求转向mysvr 定义的服务器列表
            proxy_pass    http://mysvr ;

            #以下是一些反向代理的配置可删除.

            proxy_redirect off;

            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #允许客户端请求的最大单文件字节数
            client_max_body_size 10m; 

            #缓冲区代理缓冲用户端请求的最大字节数，
            client_body_buffer_size 128k;

            #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout 90;

            #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_read_timeout 90;

            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffer_size 4k;

            #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_buffers 4 32k;

            #高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size 64k; 

            #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;    

        }
    }
}






